class CoolSupplies
{
  Integer schoolYear;
  Date startSchoolYear;
  Date endSchoolYear;
//Added top-level compositions
  1 <@>- * User users; 
  1 <@>- 1 SchoolSupply ; 
  1 <@>- * School schools;
  1 <@>- * Order orders ;



}

class User{
* users -- 1..2 UserRole roles;
}

class UserRole{
  abstract;
}

class Admin{
  isA UserRole;
}

class Parent{
  isA UserRole;
 1 -- * Student students
}

associationClass Registration{
  1 ParentAccount accountOf;
  0..1 Parent parent ; 
}

class UserAccount{
  abstract;
}

class AdminAccount{
  isA UserAccount;
unique immutable email="admin@cool.ca"; // I added unique since there are multiple admins and they all have different emails

password = “admin”;
}

class ParentAccount{
  isA UserAccount;
  immutable unique email;
  lazy name;
  lazy Integer phoneNumber;
password;
}

class LoginSession{
Date loginDate;
  Time startLogin;
  Time endLogin;
  * logins -- 1 User user ;
  * logins -- 1 UserAccount userAccount;
}

class Student
{

  * -- 1 School;
  String name;
  unique Integer id ;
}

class School
{
  * -<@> 1 CoolSupplies;
  1 -- 1..* Admin admins;
  String name;
}

class Grade
{
1..* grades -- 1 School;
1 -- * Student students;
  
  unique String name;
}

class Bundle
{
 1 -- * Grade grades;
1 -- * Item items;
Integer numberOfItems;
  lazy Double discount;
}

class Item
{
  String name;
  Double price;
}
class SchoolSupply {
1 <@>- * Item items ;
}

class BundleItem
{
 0..1 type -- 1 Item  
  enum ItemType {Mandatory, Recommended, Optional};
  ItemType type;
  Integer number;
}

class Order 
{
//Changed the two multiplicities
* orders -- 1 Parent;
  immutable autounique Integer orderNumber;
  immutable Date orderDate;
  Date dueDate;
  int penalty;
  enum Status {Confirmed, Picked-up, Cancelled};
  Status status;
}

class Payment
{
  immutable String authorizationCode;
  immutable Date date;
  0..2 -- 1 Order;
}
